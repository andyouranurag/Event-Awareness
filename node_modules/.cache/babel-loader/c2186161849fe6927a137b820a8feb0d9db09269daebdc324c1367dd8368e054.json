{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anura\\\\OneDrive\\\\Documents\\\\sem5\\\\Website\\\\mern\\\\my-app\\\\src\\\\components\\\\CalendarSidebar.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CalendarSidebar = ({\n  events\n}) => {\n  _s();\n  const calendarRef = useRef(null);\n\n  // Log calendarRef and events when the component mounts\n  useEffect(() => {\n    if (calendarRef.current) {\n      const calendarApi = calendarRef.current.getApi();\n      console.log('Calendar API:', calendarApi); // Check if calendar API is accessible\n    } else {\n      console.error('Calendar ref is null');\n    }\n\n    // Log events to check if they're being passed correctly\n    console.log('Events:', events);\n  }, [events]);\n\n  // Handle 'Today' button click\n  const handleToday = () => {\n    var _calendarRef$current;\n    let calendarApi = (_calendarRef$current = calendarRef.current) === null || _calendarRef$current === void 0 ? void 0 : _calendarRef$current.getApi();\n    if (calendarApi) {\n      calendarApi.today();\n    } else {\n      console.error(\"Calendar API not available\");\n    }\n  };\n\n  // Handle date change from input\n  const handleDateChange = e => {\n    var _calendarRef$current2;\n    let calendarApi = (_calendarRef$current2 = calendarRef.current) === null || _calendarRef$current2 === void 0 ? void 0 : _calendarRef$current2.getApi();\n    if (calendarApi) {\n      calendarApi.gotoDate(e.target.value);\n    } else {\n      console.error(\"Calendar API not available\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Calendar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar-controls mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary\",\n        onClick: handleToday,\n        children: \"Today\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        className: \"form-control\",\n        onChange: handleDateChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FullCalendar, {\n      ref: calendarRef,\n      plugins: [dayGridPlugin],\n      initialView: \"dayGridMonth\",\n      events: events // Make sure events are properly passed here\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_s(CalendarSidebar, \"HuswXQNKgAj2xlMza6JPwM9t0kA=\");\n_c = CalendarSidebar;\nexport default CalendarSidebar;\nvar _c;\n$RefreshReg$(_c, \"CalendarSidebar\");","map":{"version":3,"names":["React","useRef","useEffect","FullCalendar","dayGridPlugin","jsxDEV","_jsxDEV","CalendarSidebar","events","_s","calendarRef","current","calendarApi","getApi","console","log","error","handleToday","_calendarRef$current","today","handleDateChange","e","_calendarRef$current2","gotoDate","target","value","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","type","onChange","ref","plugins","initialView","_c","$RefreshReg$"],"sources":["C:/Users/anura/OneDrive/Documents/sem5/Website/mern/my-app/src/components/CalendarSidebar.jsx"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport FullCalendar from '@fullcalendar/react';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\n\r\nconst CalendarSidebar = ({ events }) => {\r\n    const calendarRef = useRef(null);\r\n\r\n    // Log calendarRef and events when the component mounts\r\n    useEffect(() => {\r\n        if (calendarRef.current) {\r\n            const calendarApi = calendarRef.current.getApi();\r\n            console.log('Calendar API:', calendarApi); // Check if calendar API is accessible\r\n        } else {\r\n            console.error('Calendar ref is null');\r\n        }\r\n\r\n        // Log events to check if they're being passed correctly\r\n        console.log('Events:', events);\r\n    }, [events]);\r\n\r\n    // Handle 'Today' button click\r\n    const handleToday = () => {\r\n        let calendarApi = calendarRef.current?.getApi();\r\n        if (calendarApi) {\r\n            calendarApi.today();\r\n        } else {\r\n            console.error(\"Calendar API not available\");\r\n        }\r\n    };\r\n\r\n    // Handle date change from input\r\n    const handleDateChange = (e) => {\r\n        let calendarApi = calendarRef.current?.getApi();\r\n        if (calendarApi) {\r\n            calendarApi.gotoDate(e.target.value);\r\n        } else {\r\n            console.error(\"Calendar API not available\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h4>Calendar</h4>\r\n            <div className=\"calendar-controls mb-3\">\r\n                <button className=\"btn btn-secondary\" onClick={handleToday}>Today</button>\r\n                <input type=\"date\" className=\"form-control\" onChange={handleDateChange} />\r\n            </div>\r\n            <FullCalendar\r\n                ref={calendarRef}\r\n                plugins={[dayGridPlugin]}\r\n                initialView=\"dayGridMonth\"\r\n                events={events} // Make sure events are properly passed here\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CalendarSidebar;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAChD,OAAOC,YAAY,MAAM,qBAAqB;AAC9C,OAAOC,aAAa,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,eAAe,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EACpC,MAAMC,WAAW,GAAGT,MAAM,CAAC,IAAI,CAAC;;EAEhC;EACAC,SAAS,CAAC,MAAM;IACZ,IAAIQ,WAAW,CAACC,OAAO,EAAE;MACrB,MAAMC,WAAW,GAAGF,WAAW,CAACC,OAAO,CAACE,MAAM,CAAC,CAAC;MAChDC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEH,WAAW,CAAC,CAAC,CAAC;IAC/C,CAAC,MAAM;MACHE,OAAO,CAACE,KAAK,CAAC,sBAAsB,CAAC;IACzC;;IAEA;IACAF,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEP,MAAM,CAAC;EAClC,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC;;EAEZ;EACA,MAAMS,WAAW,GAAGA,CAAA,KAAM;IAAA,IAAAC,oBAAA;IACtB,IAAIN,WAAW,IAAAM,oBAAA,GAAGR,WAAW,CAACC,OAAO,cAAAO,oBAAA,uBAAnBA,oBAAA,CAAqBL,MAAM,CAAC,CAAC;IAC/C,IAAID,WAAW,EAAE;MACbA,WAAW,CAACO,KAAK,CAAC,CAAC;IACvB,CAAC,MAAM;MACHL,OAAO,CAACE,KAAK,CAAC,4BAA4B,CAAC;IAC/C;EACJ,CAAC;;EAED;EACA,MAAMI,gBAAgB,GAAIC,CAAC,IAAK;IAAA,IAAAC,qBAAA;IAC5B,IAAIV,WAAW,IAAAU,qBAAA,GAAGZ,WAAW,CAACC,OAAO,cAAAW,qBAAA,uBAAnBA,qBAAA,CAAqBT,MAAM,CAAC,CAAC;IAC/C,IAAID,WAAW,EAAE;MACbA,WAAW,CAACW,QAAQ,CAACF,CAAC,CAACG,MAAM,CAACC,KAAK,CAAC;IACxC,CAAC,MAAM;MACHX,OAAO,CAACE,KAAK,CAAC,4BAA4B,CAAC;IAC/C;EACJ,CAAC;EAED,oBACIV,OAAA;IAAAoB,QAAA,gBACIpB,OAAA;MAAAoB,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjBxB,OAAA;MAAKyB,SAAS,EAAC,wBAAwB;MAAAL,QAAA,gBACnCpB,OAAA;QAAQyB,SAAS,EAAC,mBAAmB;QAACC,OAAO,EAAEf,WAAY;QAAAS,QAAA,EAAC;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC1ExB,OAAA;QAAO2B,IAAI,EAAC,MAAM;QAACF,SAAS,EAAC,cAAc;QAACG,QAAQ,EAAEd;MAAiB;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzE,CAAC,eACNxB,OAAA,CAACH,YAAY;MACTgC,GAAG,EAAEzB,WAAY;MACjB0B,OAAO,EAAE,CAAChC,aAAa,CAAE;MACzBiC,WAAW,EAAC,cAAc;MAC1B7B,MAAM,EAAEA,MAAO,CAAC;IAAA;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAACrB,EAAA,CAnDIF,eAAe;AAAA+B,EAAA,GAAf/B,eAAe;AAqDrB,eAAeA,eAAe;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}